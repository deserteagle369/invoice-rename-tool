import requests
import base64
import urllib.parse
import pandas as pd
import os
import re
import tkinter as tk
from tkinter import filedialog
import configparser

# Read the configuration file
config = configparser.ConfigParser()
config.read('config.ini')

# Get the Baidu API access information from the configuration file
APP_ID = config['BaiduAPI']['APP_ID']
API_KEY = config['BaiduAPI']['API_KEY']
SECRET_KEY = config['BaiduAPI']['SECRET_KEY']

# Function to select a directory
def select_directory():
    root = tk.Tk()
    root.withdraw()  # Hide the main window
    folder_selected = filedialog.askdirectory()  # Show the folder selection dialog
    return folder_selected

# Function to get the access token
def get_access_token():
    print("Getting access token...")
    params = {
        'grant_type': 'client_credentials',
        'client_id': API_KEY,
        'client_secret': SECRET_KEY
    }
    response = requests.post(TOKEN_URL, params=params)
    if response:
        print("Access token received.")
        return response.json().get('access_token')
    else:
        print("Failed to retrieve access token.")
        return None

# Function to process a file for OCR
def process_file(file_path, access_token, invoice_details):
    print(f"Processing file: {file_path}")
    with open(file_path, 'rb') as f:
        content = base64.b64encode(f.read()).decode()

    # Determine the file type and set the appropriate API parameter
    if file_path.lower().endswith('.pdf'):
        params = urllib.parse.urlencode({"pdf_file": content})
    else:
        params = urllib.parse.urlencode({"image": content})

    request_url = f"{OCR_URL}?access_token={access_token}"
    headers = {'content-type': 'application/x-www-form-urlencoded'}
    response = requests.post(request_url, data=params, headers=headers)

    if response:
        result = response.json()
        print(f"Response received for file: {file_path}")
        # Process the OCR result
        if 'words_result' in result:
            words_result = result['words_result']
            # Extract invoice information from the OCR result
            # Your code to extract information and append to invoice_details
        else:
            print(f"No words result in response for file: {file_path}")
    else:
        print(f"Failed to get a valid response for file: {file_path}")

# Function to save details to an Excel file
def save_to_excel(details, directory):
    print(f"Saving details to Excel file in directory: {directory}")
    df = pd.DataFrame(details)
    excel_path = os.path.join(directory, 'invoice_details.xlsx')
    df.to_excel(excel_path, index=False)
    print(f"Details saved to {excel_path}")

# Function to rename the file
def rename_file(original_path, new_details):
    # Your code to rename the file based on new details
    print("Rename Done")
    
# Function to process all files in the directory
def process_invoices(directory):
    access_token = get_access_token()
    if not access_token:
        print("No access token available. Exiting.")
        return

    invoice_details = []

    for filename in os.listdir(directory):
        if filename.lower().endswith(('.pdf', '.jpg', '.jpeg', '.png', '.bmp')):
            file_path = os.path.join(directory, filename)
            process_file(file_path, access_token, invoice_details)

    save_to_excel(invoice_details, directory)

# Main execution
if __name__ == "__main__":
    directory = select_directory()
    if directory:
        print(f"Selected directory: {directory}")
        process_invoices(directory)
    else:
        print("No directory selected. Exiting.")
